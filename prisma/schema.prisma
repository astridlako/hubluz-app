// HUBLUZ MVP Database Schema
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/hubluz/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String             @id @default(cuid())
  email              String             @unique
  password           String
  firstName          String
  lastName           String
  companyName        String?
  emailVerified      DateTime?
  image              String?
  subscriptionTier   SubscriptionTier   @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  lastLoginAt        DateTime?

  accounts             Account[]
  sessions             Session[]
  posts                Post[]
  media                Media[]
  templates            Template[]
  analytics            Analytics[]
  platformConnections  PlatformConnection[]
  subscriptionHistory  SubscriptionHistory[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SubscriptionTier {
  FREE
  PAID
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum Platform {
  FACEBOOK
  INSTAGRAM
  LINKEDIN
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

model Post {
  id           String     @id @default(cuid())
  userId       String
  title        String?
  content      String
  platforms    Platform[]
  status       PostStatus @default(DRAFT)
  scheduledAt  DateTime?
  publishedAt  DateTime?
  imageUrls    String[]   @default([])
  hashtags     String[]   @default([])
  templateId   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  template  Template?  @relation(fields: [templateId], references: [id])
  analytics Analytics[]

  @@map("posts")
}

model Media {
  id               String    @id @default(cuid())
  userId           String
  fileName         String
  originalName     String
  fileSize         Int
  mimeType         String
  cloudStoragePath String
  cdnUrl           String
  tags             String[]  @default([])
  createdAt        DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("media")
}

model Template {
  id          String     @id @default(cuid())
  userId      String
  name        String
  content     String
  platforms   Platform[]
  tags        String[]   @default([])
  isPublic    Boolean    @default(false)
  usageCount  Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts Post[]

  @@map("templates")
}

model Analytics {
  id         String   @id @default(cuid())
  userId     String
  postId     String
  platform   Platform
  reach      Int      @default(0)
  engagement Int      @default(0)
  clicks     Int      @default(0)
  likes      Int      @default(0)
  shares     Int      @default(0)
  comments   Int      @default(0)
  recordedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model PlatformConnection {
  id             String    @id @default(cuid())
  userId         String
  platform       Platform
  isConnected    Boolean   @default(false)
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  lastSyncAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@map("platform_connections")
}

model SubscriptionHistory {
  id            String             @id @default(cuid())
  userId        String
  tier          SubscriptionTier
  status        SubscriptionStatus
  startDate     DateTime
  endDate       DateTime?
  amount        Float?
  currency      String?
  stripeId      String?
  createdAt     DateTime           @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription_history")
}
