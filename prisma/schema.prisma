// HUBLUZ MVP Database Schema
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "windows", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  companyName     String?
  subscriptionTier String   @default("free")
  subscriptionStatus String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginAt     DateTime?
  emailVerified   DateTime?
  image           String?
  
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  platformConnections PlatformConnection[]
  mediaAssets     MediaAsset[]
  templates       Template[]
  subscriptionHistory SubscriptionHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PlatformConnection {
  id            String   @id @default(cuid())
  userId        String
  platform      String   // "facebook", "instagram", "linkedin"
  platformUserId String?
  accessToken   String?  @db.Text
  refreshToken  String?  @db.Text
  tokenExpiresAt DateTime?
  isActive      Boolean  @default(true)
  accountName   String?
  accountImage  String?
  permissions   Json?    // Store platform-specific permissions
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts Post[]
  
  @@unique([userId, platform])
}

model Post {
  id              String   @id @default(cuid())
  userId          String
  connectionId    String
  content         String   @db.Text
  mediaAssets     String[] // Array of MediaAsset IDs
  scheduledFor    DateTime?
  publishedAt     DateTime?
  status          String   @default("draft") // "draft", "scheduled", "published", "failed"
  platforms       String[] // Array of platform names
  hashtags        String[]
  mentions        String[]
  location        String?
  postType        String   @default("post") // "post", "story", "reel", "article"
  engagement      Json?    // Store engagement metrics
  externalId      String?  // Platform-specific post ID
  errorMessage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  connection PlatformConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  analytics PostAnalytics[]
  
  @@index([userId, status])
  @@index([scheduledFor])
}

model PostAnalytics {
  id           String   @id @default(cuid())
  postId       String
  platform     String
  impressions  Int      @default(0)
  reach        Int      @default(0)
  likes        Int      @default(0)
  comments     Int      @default(0)
  shares       Int      @default(0)
  clicks       Int      @default(0)
  saves        Int      @default(0)
  engagement   Float    @default(0)
  date         DateTime @default(now())
  rawData      Json?    // Store platform-specific analytics
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([postId, platform, date])
}

model MediaAsset {
  id          String   @id @default(cuid())
  userId      String
  fileName    String
  originalName String
  mimeType    String
  fileSize    Int
  cloudStoragePath String // S3 key or cloud storage path
  thumbnailPath String?
  altText     String?
  tags        String[]
  folder      String   @default("uploads")
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, fileName])  // Add this line
  @@index([userId, folder])
}

model Template {
  id          String   @id @default(cuid())
  userId      String
  name        String
  content     String   @db.Text
  mediaAssets String[] // Array of MediaAsset IDs
  hashtags    String[]
  category    String   @default("general")
  platforms   String[] // Which platforms this template is optimized for
  isPublic    Boolean  @default(false)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, name])     // Add this line
  @@index([userId, category])
}

model SubscriptionHistory {
  id            String   @id @default(cuid())
  userId        String
  tier          String   // "free", "pro"
  status        String   // "active", "cancelled", "expired"
  startDate     DateTime
  endDate       DateTime?
  amount        Float?
  currency      String   @default("USD")
  paymentMethod String?
  stripeSubscriptionId String?
  createdAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, status])
}